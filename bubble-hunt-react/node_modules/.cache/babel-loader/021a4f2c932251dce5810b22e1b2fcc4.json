{"ast":null,"code":"import _slicedToArray from \"/home/fadi/Desktop/code/bubble-hunt/bubble-hunt-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/fadi/Desktop/code/bubble-hunt/bubble-hunt-react/src/components/aimGame/index.js\";\nimport React, { Component } from 'react';\nimport Canvas from '../canvas';\nconst units = 10;\nexport default class AimGame extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      start: false,\n      bubbles: [],\n      score: 0,\n      lives: 5\n    };\n    this.t = null;\n    this.secondsPassed = 0;\n    this.delay = 2000;\n\n    this.resetDelay = () => {\n      this.delay = 2000;\n    };\n\n    this.decDelay = () => {\n      setTimeout(() => {\n        this.secondsPassed += 1;\n\n        if (this.secondsPassed < 37) {\n          this.delay -= 50;\n          this.decDelay();\n        }\n      }, 1000);\n    };\n\n    this.generateRandomCoordinates = () => {\n      const random = () => Math.floor(Math.random() * units);\n\n      return [random(), random()];\n    };\n\n    this.showBubble = () => {\n      const newCoor = this.generateRandomCoordinates();\n      const bubbles = this.state.bubbles;\n\n      if (bubbles.length === units * units) {\n        return this.endGame();\n      }\n\n      const i = bubbles.find(([first, second]) => {\n        const _newCoor = _slicedToArray(newCoor, 2),\n              newFirst = _newCoor[0],\n              newSecond = _newCoor[1];\n\n        return newFirst === first && newSecond === second;\n      });\n\n      if (!i) {\n        this.setState(({\n          bubbles: bubbles2\n        }) => ({\n          bubbles: [...bubbles2, newCoor]\n        }));\n        this.t = setTimeout(this.showBubble, this.delay);\n      } else {\n        this.showBubble();\n      }\n\n      return null;\n    };\n\n    this.incScore = id => {\n      this.setState(({\n        score\n      }) => ({\n        score: score + 100\n      }));\n      this.hideBubble(id);\n      this.setBestScore();\n    };\n\n    this.decScore = () => {\n      const _this$state = this.state,\n            lives = _this$state.lives,\n            start = _this$state.start;\n      if (lives === 1) this.endGame();\n\n      if (start) {\n        this.setState(prevState => ({\n          score: prevState.score - 80,\n          lives: prevState.lives - 1\n        }));\n      }\n    };\n\n    this.hideBubble = id => {\n      const _id$toString$split = id.toString().split(''),\n            _id$toString$split2 = _slicedToArray(_id$toString$split, 2),\n            first = _id$toString$split2[0],\n            second = _id$toString$split2[1];\n\n      const coor = [+first, +second];\n      const newBubbles = this.state.bubbles.filter(([first, second]) => {\n        const newFirst = coor[0],\n              newSecond = coor[1];\n        return !(newFirst === first && newSecond === second);\n      });\n      this.setState({\n        bubbles: newBubbles\n      });\n    };\n\n    this.startGame = () => {\n      this.resetDelay();\n      this.decDelay();\n      this.setState({\n        start: true,\n        score: 0\n      });\n      this.t = setTimeout(this.showBubble, 500);\n    };\n\n    this.endGame = () => {\n      clearTimeout(this.t); // // save record in local storage ...\n\n      this.setState({\n        start: false,\n        bubbles: [],\n        lives: 0\n      });\n    };\n\n    this.setBestScore = () => {\n      if (this.getBestScore() < this.state.score) setTimeout(() => localStorage.setItem('bestScore', JSON.stringify(this.state.score)), 0);\n    };\n\n    this.getBestScore = () => {\n      const bestScore = localStorage.getItem('bestScore');\n      return bestScore ? JSON.parse(bestScore) : '0';\n    };\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          bubbles = _this$state2.bubbles,\n          start = _this$state2.start,\n          score = _this$state2.score,\n          lives = _this$state2.lives;\n    return React.createElement(React.Fragment, null, React.createElement(\"h3\", {\n      onClick: start ? this.endGame : this.startGame,\n      className: \"start-end-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, start ? 'End' : 'Start'), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"your score is : \", score, \" lives: \", lives, \" best score :\", this.getBestScore()), React.createElement(Canvas, {\n      units: units,\n      bubbles: bubbles,\n      bubbleOnClick: this.incScore,\n      canvasOnClick: this.decScore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/fadi/Desktop/code/bubble-hunt/bubble-hunt-react/src/components/aimGame/index.js"],"names":["React","Component","Canvas","units","AimGame","state","start","bubbles","score","lives","t","secondsPassed","delay","resetDelay","decDelay","setTimeout","generateRandomCoordinates","random","Math","floor","showBubble","newCoor","length","endGame","i","find","first","second","newFirst","newSecond","setState","bubbles2","incScore","id","hideBubble","setBestScore","decScore","prevState","toString","split","coor","newBubbles","filter","startGame","clearTimeout","getBestScore","localStorage","setItem","JSON","stringify","bestScore","getItem","parse","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Canvas from '../canvas';\n\nconst units = 10;\nexport default class AimGame extends Component {\n  state = {\n    start: false,\n    bubbles: [],\n    score: 0,\n    lives: 5,\n  };\n\n  t = null;\n\n  secondsPassed = 0;\n\n  delay = 2000;\n\n  resetDelay = () => {\n    this.delay = 2000;\n  };\n\n  decDelay = () => {\n    setTimeout(() => {\n      this.secondsPassed += 1;\n      if (this.secondsPassed < 37) {\n        this.delay -= 50;\n        this.decDelay();\n      }\n    }, 1000);\n  };\n\n  generateRandomCoordinates = () => {\n    const random = () => Math.floor(Math.random() * units);\n    return [random(), random()];\n  };\n\n  showBubble = () => {\n    const newCoor = this.generateRandomCoordinates();\n    const { bubbles } = this.state;\n    if (bubbles.length === units * units) {\n      return this.endGame();\n    }\n    const i = bubbles.find(([first, second]) => {\n      const [newFirst, newSecond] = newCoor;\n      return newFirst === first && newSecond === second;\n    });\n    if (!i) {\n      this.setState(({ bubbles: bubbles2 }) => ({\n        bubbles: [...bubbles2, newCoor],\n      }));\n      this.t = setTimeout(this.showBubble, this.delay);\n    } else {\n      this.showBubble();\n    }\n    return null;\n  };\n\n  incScore = id => {\n    this.setState(({ score }) => ({ score: score + 100 }));\n    this.hideBubble(id);\n    this.setBestScore();\n  };\n\n  decScore = () => {\n    const { lives, start } = this.state;\n    if (lives === 1) this.endGame();\n    if (start) {\n      this.setState(prevState => ({\n        score: prevState.score - 80,\n        lives: prevState.lives - 1,\n      }));\n    }\n  };\n\n  hideBubble = id => {\n    const [first, second] = id.toString().split('');\n    const coor = [+first, +second];\n    const newBubbles = this.state.bubbles.filter(([first, second]) => {\n      const [newFirst, newSecond] = coor;\n      return !(newFirst === first && newSecond === second);\n    });\n    this.setState({ bubbles: newBubbles });\n  };\n\n  startGame = () => {\n    this.resetDelay();\n    this.decDelay();\n    this.setState({ start: true, score: 0 });\n    this.t = setTimeout(this.showBubble, 500);\n  };\n\n  endGame = () => {\n    clearTimeout(this.t);\n    // // save record in local storage ...\n    this.setState({ start: false, bubbles: [], lives: 0 });\n  };\n\n  setBestScore = () => {\n    if (this.getBestScore() < this.state.score)\n      setTimeout(() => localStorage.setItem('bestScore', JSON.stringify(this.state.score)), 0);\n  };\n\n  getBestScore = () => {\n    const bestScore = localStorage.getItem('bestScore');\n    return bestScore ? JSON.parse(bestScore) : '0';\n  };\n\n  render() {\n    const { bubbles, start, score, lives } = this.state;\n    return (\n      <>\n        <h3 onClick={start ? this.endGame : this.startGame} className=\"start-end-text\">\n          {start ? 'End' : 'Start'}\n        </h3>\n        <h3>\n          your score is : {score} lives: {lives} best score :{this.getBestScore()}\n        </h3>\n        <Canvas\n          units={units}\n          bubbles={bubbles}\n          bubbleOnClick={this.incScore}\n          canvasOnClick={this.decScore}\n        />\n      </>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}